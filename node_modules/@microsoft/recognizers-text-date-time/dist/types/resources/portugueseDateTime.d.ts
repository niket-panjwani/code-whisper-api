export declare namespace PortugueseDateTime {
    const LangMarker = "Por";
    const CheckBothBeforeAfter = false;
    const TillRegex = "(?<till>\\b(at[e\u00E9]h?|[a\u00E0]s|ao?)\\b|--|-|\u2014|\u2014\u2014)(\\s+\\b(o|[a\u00E0](s)?)\\b)?";
    const RangeConnectorRegex: string;
    const DayRegex = "(?<day>(?:3[0-1]|[1-2]\\d|0?[1-9]))(?=\\b|t)";
    const WrittenDayRegex = "(?<day>(vinte\\s+e\\s+)?(um|dois|tr[e\u00EA]s|quatro|cinco|seis|sete|oito|nove)|dez|onze|doze|treze|(c|qu)atorze|quinze|dez[ae](s(seis|sete)|nove)|dezoito|vinte|trinta(\\s+e\\s+um)?)";
    const MonthNumRegex = "(?<month>1[0-2]|(0)?[1-9])\\b";
    const AmDescRegex: string;
    const PmDescRegex: string;
    const AmPmDescRegex: string;
    const OclockRegex = "(?<oclock>em\\s+ponto)";
    const DescRegex: string;
    const OfPrepositionRegex = "(\\bd(o|a|e)s?\\b)";
    const AfterNextSuffixRegex = "\\b(que\\s+vem|passad[oa])\\b";
    const RangePrefixRegex = "((de(sde)?|das?|entre)\\s+(a(s)?\\s+)?)";
    const TwoDigitYearRegex: string;
    const RelativeRegex = "(?<order>((n?est[ae]s?|pr[o\u00F3]xim[oa]s?|([u\u00FA]ltim[ao]s?))(\\s+fina(l|is)\\s+d[eao])?)|(fina(l|is)\\s+d[eao]))\\b";
    const StrictRelativeRegex = "(?<order>((n?est[ae]|pr[o\u00F3]xim[oa]|([u\u00FA]ltim(o|as|os)))(\\s+fina(l|is)\\s+d[eao])?)|(fina(l|is)\\s+d[eao]))\\b";
    const WrittenOneToNineRegex = "(uma?|dois|duas|tr[e\u00EA]s|quatro|cinco|seis|sete|oito|nove)";
    const WrittenOneHundredToNineHundredRegex = "(duzent[oa]s|trezent[oa]s|[cq]uatrocent[ao]s|quinhent[ao]s|seiscent[ao]s|setecent[ao]s|oitocent[ao]s|novecent[ao]s|cem|(?<!por\\s+)(cento))";
    const WrittenOneToNinetyNineRegex: string;
    const FullTextYearRegex: string;
    const YearRegex: string;
    const RelativeMonthRegex = "(?<relmonth>([nd]?es[st]e|pr[\u00F3o]ximo|passsado|[u\u00FA]ltimo)\\s+m[e\u00EA]s)\\b";
    const MonthRegex = "(?<month>abr(il)?|ago(sto)?|dez(embro)?|fev(ereiro)?|jan(eiro)?|ju[ln](ho)?|mar([\u00E7c]o)?|maio?|nov(embro)?|out(ubro)?|sep?t(embro)?)";
    const MonthSuffixRegex: string;
    const DateUnitRegex = "(?<unit>(?<uoy>m[\u00EAe]s)(?<plural>es)?|(ano|(?<uoy>semana|dia))(?<plural>s)?)\\b";
    const PastRegex = "(?<past>\\b(passad[ao](s)?|[u\u00FA]ltim[oa](s)?|anterior(es)?|h[a\u00E1]|pr[\u00E9e]vi[oa](s)?)\\b)";
    const FutureRegex = "(?<past>\\b(seguinte(s)?|pr[o\u00F3]xim[oa](s)?|daqui\\s+a)\\b)";
    const SimpleCasesRegex: string;
    const MonthFrontSimpleCasesRegex: string;
    const MonthFrontBetweenRegex: string;
    const DayBetweenRegex: string;
    const SpecialYearPrefixes = "((do\\s+)?calend[a\u00E1]rio|civil|(?<special>fiscal|escolar|letivo))";
    const OneWordPeriodRegex: string;
    const MonthWithYearRegex: string;
    const MonthNumWithYearRegex: string;
    const WeekOfMonthRegex: string;
    const WeekOfYearRegex: string;
    const OfYearRegex: string;
    const FirstLastRegex = "\\b(n?[ao]s?\\s+)?((?<first>primeir[ao]s?)|(?<last>[u\u00FA]ltim[ao]s?))\\b";
    const FollowedDateUnit: string;
    const NumberCombinedWithDateUnit: string;
    const QuarterRegex: string;
    const QuarterRegexYearFront: string;
    const AllHalfYearRegex = "^[.]";
    const PrefixDayRegex = "^[.]";
    const SeasonRegex: string;
    const WhichWeekRegex: string;
    const WeekOfRegex = "(semana)(\\s*)((do|da|de))";
    const MonthOfRegex = "(mes)(\\s*)((do|da|de))";
    const RangeUnitRegex = "\\b(?<unit>anos?|meses|m[\u00EAe]s|semanas?)\\b";
    const BeforeAfterRegex = "^[.]";
    const UpcomingPrefixRegex = ".^";
    const NextPrefixRegex: string;
    const InConnectorRegex = "\\b(em)\\b";
    const SinceYearSuffixRegex = "^[.]";
    const WithinNextPrefixRegex: string;
    const TodayNowRegex = "\\b(hoje|agora)\\b";
    const CenturySuffixRegex = "^[.]";
    const FromRegex = "(de(sde)?(\\s*a(s)?)?)$";
    const BetweenRegex = "(entre\\s*([oa](s)?)?)";
    const WeekDayRegex = "\\b(?<weekday>(domingos?|(segunda|ter[\u00E7c]a|quarta|quinta|sexta)s?([-\\s+]feiras?)?|s[a\u00E1]bados?|(2|3|4|5|6)[a\u00AA])\\b|(dom|seg|ter[c\u00E7]|qua|qui|sex|sab)\\b(\\.?(?=\\s|,|;|$)))";
    const OnRegex: string;
    const RelaxedOnRegex: string;
    const ThisRegex: string;
    const LastDateRegex: string;
    const NextDateRegex: string;
    const SpecialDayRegex = "\\b((d?o\\s+)?(dia\\s+antes\\s+de\\s+ontem|antes\\s+de\\s+ontem|anteontem)|((d?o\\s+)?(dia\\s+|depois\\s+|dia\\s+depois\\s+)?de\\s+amanh[a\u00E3])|(o\\s)?dia\\s+seguinte|(o\\s)?pr[o\u00F3]ximo\\s+dia|(o\\s+)?[u\u00FA]ltimo\\s+dia|ontem|amanh[\u00E3a]|hoje)|(do\\s+dia$)\\b";
    const SpecialDayWithNumRegex = "^[.]";
    const ForTheRegex = ".^";
    const FlexibleDayRegex: string;
    const WeekDayAndDayOfMonthRegex: string;
    const WeekDayAndDayRegex: string;
    const WeekDayOfMonthRegex: string;
    const RelativeWeekDayRegex = "^[.]";
    const AmbiguousRangeModifierPrefix = "^[.]";
    const NumberEndingPattern = "^[.]";
    const SpecialDateRegex: string;
    const OfMonthRegex: string;
    const MonthEndRegex: string;
    const WeekDayEnd: string;
    const WeekDayStart = "^\\b$";
    const DateYearRegex: string;
    const DateExtractor1: string;
    const DateExtractor2: string;
    const DateExtractor3: string;
    const DateExtractor4: string;
    const DateExtractor5: string;
    const DateExtractor6: string;
    const DateExtractor7: string;
    const DateExtractor8: string;
    const DateExtractor9: string;
    const DateExtractor10: string;
    const DateExtractor11: string;
    const HourNumRegex = "\\b(?<hournum>zero|uma|duas|tr[\u00EAe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze)\\b";
    const MinuteNumRegex = "(?<minnum>um|dois|tr[\u00EAe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quatorze|quinze|dez[ea]sseis|dez[ea]sete|dezoito|dez[ea]nove|vinte|trinta|[qc]uarenta|cin[qc]uenta)";
    const DeltaMinuteNumRegex = "(?<deltaminnum>um|dois|tr[\u00EAe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quatorze|quinze|dez[ea]sseis|dez[ea]sete|dezoito|dez[ea]nove|vinte|trinta|[qc]uarenta|cin[qc]uenta)";
    const PmRegex = "(horas\\s+)?(?<pm>((pela|de|da|\\b[\u00E0a]\\b|na)\\s+(tarde|noite)))|((depois\\s+do|ap[\u00F3o]s\\s+o)\\s+(almo[\u00E7c]o|meio dia|meio-dia))";
    const AmRegex = "(horas\\s+)?(?<am>(pela|de|da|na)\\s+(manh[\u00E3a]|madrugada))";
    const AmTimeRegex = "(?<am>([dn]?es[st]a|(pela|de|da|na))\\s+(manh[\u00E3a]|madrugada))";
    const PmTimeRegex = "(?<pm>(([dn]?es[st]a|\\b[\u00E0a]\\b|(pela|de|da|na))\\s+(tarde|noite)))|((depois\\s+do|ap[\u00F3o]s\\s+o)\\s+(almo[\u00E7c]o|meio dia|meio-dia))";
    const LessThanOneHour: string;
    const LessThanOneHourSuffix = "(?<lth>((\\s+e\\s+)?(quinze|(um\\s+|dois\\s+|tr[\u00EAes]\\s+)?quartos?)|quinze|(\\s*)(um\\s+|dois\\s+|tr[\u00EAes]\\s+)?quartos?|(\\s+e\\s+)(meia|trinta)))";
    const TensTimeRegex = "(?<tens>dez|vinte|trinta|[qc]uarenta|cin[qc]uenta)";
    const WrittenTimeRegex: string;
    const TimePrefix: string;
    const TimeSuffix: string;
    const BasicTime: string;
    const MidnightRegex = "(?<midnight>meia\\s*(-\\s*)?noite)";
    const MidmorningRegex = "(?<midmorning>meio\\s+da\\s+manh\u00E3)";
    const MidEarlyMorning = "(?<midearlymorning>meio\\s+da\\s+madrugada)";
    const MidafternoonRegex = "(?<midafternoon>meio\\s+da\\s+tarde)";
    const MiddayRegex = "(?<midday>meio\\s*(-\\s*)?dia)";
    const MidTimeRegex: string;
    const AtRegex: string;
    const ConnectNumRegex: string;
    const TimeRegex1: string;
    const TimeRegex2: string;
    const TimeRegex3: string;
    const TimeRegex4: string;
    const TimeRegex5: string;
    const TimeRegex6: string;
    const TimeRegex7: string;
    const TimeRegex8: string;
    const TimeRegex9: string;
    const TimeRegex11: string;
    const TimeRegex12: string;
    const PrepositionRegex = "(?<prep>([\u00E0a]s?|em|por|pel[ao]|n[ao]|de|d[ao]?)?$)";
    const NowRegex = "\\b(?<now>((logo|exatamente)\\s+)?agora(\\s+mesmo)?|neste\\s+momento|(assim\\s+que|t[\u00E3a]o\\s+cedo\\s+quanto)\\s+(poss[i\u00ED]vel|possas?|possamos)|o\\s+mais\\s+(cedo|r[a\u00E1]pido)\\s+poss[\u00EDi]vel|recentemente|previamente)\\b";
    const SuffixRegex = "^\\s*((e|a|em|por|pel[ao]|n[ao]|de)\\s+)?(manh[\u00E3a]|madrugada|meio\\s*dia|tarde|noite)\\b";
    const TimeOfDayRegex = "\\b(?<timeOfDay>manh[\u00E3a]|madrugada|tarde|noite|((depois\\s+do|ap[\u00F3o]s\\s+o)\\s+(almo[\u00E7c]o|meio[ -]dia)))\\b";
    const SpecificTimeOfDayRegex: string;
    const TimeOfTodayAfterRegex: string;
    const TimeOfTodayBeforeRegex: string;
    const SimpleTimeOfTodayAfterRegex: string;
    const SimpleTimeOfTodayBeforeRegex: string;
    const SpecificEndOfRegex = "([na]o\\s+)?(fi(m|nal)|t[\u00E9e]rmin(o|ar))(\\s+d?o(\\s+dia)?(\\s+de)?)?\\s*$";
    const UnspecificEndOfRegex = "^[.]";
    const UnspecificEndOfRangeRegex = "^[.]";
    const UnitRegex = "(?<unit>anos?|meses|m[\u00EAe]s|semanas?|dias?|horas?|hrs?|hs?|minutos?|mins?|segundos?|segs?)\\b";
    const ConnectorRegex = "^(,|t|para [ao]|para as|pras|(cerca|perto|ao\\s+redor|por\\s+volta)\\s+(de|das)|quase)$";
    const TimeHourNumRegex = "(?<hour>vinte( e (um|dois|tr[\u00EAe]s|quatro))?|zero|uma?|dois|duas|tr[\u00EAe]s|quatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|quatorze|catorze|quinze|dez([ea]sseis|[ea]ssete|oito|[ea]nove))";
    const PureNumFromTo: string;
    const PureNumBetweenAnd: string;
    const SpecificTimeFromTo = "^[.]";
    const SpecificTimeBetweenAnd = "^[.]";
    const TimeUnitRegex = "(?<unit>(hora|minuto|min|segundo|se[cg])(?<plural>s)?|h)\\b";
    const TimeFollowedUnit: string;
    const TimeNumberCombinedWithUnit: string;
    const DateTimePeriodNumberCombinedWithUnit: string;
    const PeriodTimeOfDayWithDateRegex = "\\b((e|[\u00E0a]|em|na|no|ao|pel[ao]|de)\\s+)?(?<timeOfDay>manh[\u00E3a]|madrugada|(passado\\s+(o\\s+)?)?meio\\s+dia|tarde|noite)\\b";
    const RelativeTimeUnitRegex: string;
    const SuffixAndRegex = "(?<suffix>\\s*(e)\\s+(?<suffix_num>meia|(um\\s+)?quarto))";
    const FollowedUnit: string;
    const LessThanRegex = "^[.]";
    const MoreThanRegex = "^[.]";
    const DurationNumberCombinedWithUnit: string;
    const AnUnitRegex: string;
    const DuringRegex = "^[.]";
    const AllRegex = "\\b(?<all>tod[oa]?\\s+(o|a)\\s+(?<unit>ano|m[\u00EAe]s|semana|dia))\\b";
    const HalfRegex = "\\b(?<half>mei[oa]\\s+(?<unit>ano|m[\u00EAe]s|semana|dia|hora))\\b";
    const ConjunctionRegex = "^[.]";
    const InexactNumberRegex = "\\b(poucos|pouco|algum|alguns|v[\u00E1a]rios)\\b";
    const InexactNumberUnitRegex: string;
    const HolidayRegex1: string;
    const HolidayRegex2: string;
    const HolidayRegex3: string;
    const BeforeRegex = "(antes(\\s+(d(e\\s+)?[aeo]s?)?)?|at[\u00E9e]h?(\\s+[o\u00E0a]s?\\b)?)";
    const AfterRegex = "((depois|ap[\u00F3o]s|a\\s+partir)(\\s*(de|d?[oa]s?)?)?)";
    const SinceRegex = "(desde(\\s+(as?|o))?)";
    const AroundRegex = "(?:\\b(?:cerca|perto|ao\\s+redor|por\\s+volta)\\s*?\\b)(\\s+(de|das))?";
    const PeriodicRegex = "\\b(?<periodic>di[\u00E1a]ri[ao]|(diaria|mensal|semanal|quinzenal|(bi|tri|se)mestral|anual)(mente)?)\\b";
    const EachExpression = "cada|tod[oa]s?\\s*([oa]s)?";
    const EachUnitRegex: string;
    const EachPrefixRegex: string;
    const EachDayRegex: string;
    const BeforeEachDayRegex: string;
    const SetEachRegex: string;
    const LaterEarlyPeriodRegex = "^[.]";
    const WeekWithWeekDayRangeRegex = "^[.]";
    const GeneralEndingRegex = "^[.]";
    const MiddlePauseRegex = "^[.]";
    const PrefixArticleRegex = "^[\\.]";
    const OrRegex = "^[.]";
    const SpecialYearTermsRegex: string;
    const YearPlusNumberRegex: string;
    const NumberAsTimeRegex: string;
    const TimeBeforeAfterRegex = "^[.]";
    const DateNumberConnectorRegex = "^[.]";
    const ComplexDatePeriodRegex = "^[.]";
    const AgoRegex = "\\b(antes(\\s+d[eoa]s?\\s+(?<day>hoje|ontem|manh\u00E3))?|atr[\u00E1a]s|no passado)\\b";
    const LaterRegex = "\\b(depois(\\s+d[eoa]s?\\s+(agora|(?<day>hoje|ontem|manh\u00E3)))?|ap[\u00F3o]s (as)?|desde( (as|o))?|no futuro|mais tarde)\\b";
    const Tomorrow = "amanh[\u00E3a]";
    const UnitMap: ReadonlyMap<string, string>;
    const UnitValueMap: ReadonlyMap<string, number>;
    const SpecialYearPrefixesMap: ReadonlyMap<string, string>;
    const SeasonMap: ReadonlyMap<string, string>;
    const SeasonValueMap: ReadonlyMap<string, number>;
    const CardinalMap: ReadonlyMap<string, number>;
    const DayOfWeek: ReadonlyMap<string, number>;
    const MonthOfYear: ReadonlyMap<string, number>;
    const Numbers: ReadonlyMap<string, number>;
    const HolidayNames: ReadonlyMap<string, string[]>;
    const VariableHolidaysTimexDictionary: ReadonlyMap<string, string>;
    const DoubleNumbers: ReadonlyMap<string, number>;
    const DateTokenPrefix = "em ";
    const TimeTokenPrefix = "as ";
    const TokenBeforeDate = "o ";
    const TokenBeforeTime = "as ";
    const PastPrefixRegex = ".^";
    const PreviousPrefixRegex: string;
    const ThisPrefixRegex = "([nd]?es[st][ea])\\b";
    const RelativeDayRegex = "^[\\.]";
    const RestOfDateRegex = "^[\\.]";
    const DurationUnitRegex: string;
    const RelativeDurationUnitRegex: string;
    const ReferenceDatePeriodRegex = "^[.]";
    const FromToRegex = "\\b(from).+(to)\\b.+";
    const SingleAmbiguousMonthRegex = "^(the\\s+)?(may|march)$";
    const UnspecificDatePeriodRegex = "^[.]";
    const PrepositionSuffixRegex = "\\b(on|in|at|around|from|to)$";
    const RestOfDateTimeRegex = "^[\\.]";
    const SetWeekDayRegex = "^[\\.]";
    const NightRegex = "\\b(meia noite|noite|de noite)\\b";
    const CommonDatePrefixRegex = "\\b(dia)\\s+$";
    const DurationConnectorRegex = "^[.]";
    const CenturyRegex = "^[.]";
    const DecadeRegex = "^[.]";
    const DecadeWithCenturyRegex = "^[.]";
    const RelativeDecadeRegex: string;
    const YearSuffix: string;
    const SuffixAfterRegex = "^\\b$";
    const YearPeriodRegex: string;
    const FutureSuffixRegex = "\\b(seguinte(s)?|pr[o\u00F3]xim[oa](s)?|no\\s+futuro)\\b";
    const PastSuffixRegex = "^\\b$";
    const ModPrefixRegex: string;
    const ModSuffixRegex: string;
    const WrittenDecades: ReadonlyMap<string, number>;
    const SpecialDecadeCases: ReadonlyMap<string, number>;
    const DefaultLanguageFallback = "DMY";
    const DurationDateRestrictions: any[];
    const AmbiguityFiltersDict: ReadonlyMap<string, string>;
    const AmbiguityTimeFiltersDict: ReadonlyMap<string, string>;
    const EarlyMorningTermList: string[];
    const MorningTermList: string[];
    const AfternoonTermList: string[];
    const EveningTermList: string[];
    const NightTermList: string[];
    const SameDayTerms: string[];
    const PlusOneDayTerms: string[];
    const MinusOneDayTerms: string[];
    const PlusTwoDayTerms: string[];
    const MinusTwoDayTerms: string[];
    const MonthTerms: string[];
    const MonthToDateTerms: string[];
    const WeekendTerms: string[];
    const WeekTerms: string[];
    const FortnightTerms: string[];
    const YearTerms: string[];
    const YearToDateTerms: string[];
    const SpecialCharactersEquivalent: ReadonlyMap<string, string>;
    const DayTypeRegex = "(diari([ao]|amente))$";
    const WeekTypeRegex = "(semanal(mente)?)$";
    const BiWeekTypeRegex = "(quinzenal(mente)?)$";
    const MonthTypeRegex = "(mensal(mente)?)$";
    const BiMonthTypeRegex = "(bimestral(mente)?)$";
    const QuarterTypeRegex = "(trimestral(mente)?)$";
    const SemiAnnualTypeRegex = "(semestral(mente)?)$";
    const YearTypeRegex = "(anual(mente)?)$";
    const ThisTerms: string[];
}
